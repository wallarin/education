
1.새 프로젝트 생성(웹 사이트 1개이다.) > New > Other > Web > Dynamic Web Project > Next > "JSPTest" > Target runtime(Apache Tomcat 8.5), Dynamic web module version(3.1) > Next > Next > Context root, Content directory, Generate web.xml(체크 O) > Finish


JSP, Java Server Pages
- 서블릿의 다음 버전


서블릿
1. 장점 > 자바 기반. 자바 구문을 사용할 수 있다. > 그 자바구문을 웹 페이지를 만드는데 사용 가능하다.
2. 단점 > 자바 기반이다 보니 > 클라이언트 코드 작성하기가 불편하다. + 가상 주소 매핑(web.xml)하기 번거롭다.


JSP
1. 장점 > HTML 문서 기반 > 클라이언트 코드 작성이 쉽다. + 가상 주소 매핑 불필요(web.xml) > 브라우저가 JSP를 직접 호출이 가능(why? HTML 문서 기반이라서..)
2. 단점 > HTML 문서 기반 > 자바 구문 작성이 불편하다. > 상대적으로 서블릿보다 불편함이 덜 한 느낌이다..






JSP 요소

1. JSP 지시자, JSP Directive
	- <%@ %>
	- page 지시자
	- include 지시자
	- taglib 지시자

2. 스크립트 요소, Scripting Elements
	- <% %>
	- 스크립틀릿
	- 익스프레션
	- 선언부
	
2.5 내장 객체

3. 액션 태그, Action Tags
	- <jsp:XXX>, <c:XXX>..
	- 기본 액션 태그
	- 확장 액션 태그 > JSTL
	- 사용자 정의 액션 태그







page 지시자
- <%@ page 속성="값" 속성="값" 속성="값" %>
- JSP 페이지에 항상 존재하는 지시자
- 1개 이상 작성할 수 있다.
- 하는일? > JSP 컨테이너(아파치 톰캣)에게 해당 페이지의 정보를 알려준다.
- <%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8" %> ==> 톰캣에게 전달되는 정보이다.

	a. language="java"
	- JSP 페이지에서 사용할 서버 프로그래밍 언어 지정(아직 Java말고는 없다.)
	
	b. contentType="text/html; charset=UTF-8"
	- JSP 페이지 콘텐츠에 대한 기술
	- text/html: MIME 타입 > HTML 문서 라는 의미
	- charset=UTF-8: 인코딩 > 톰캣이 JSP를 읽을 때 사용할 인코딩
	- contentType="text/html; charset=ISO-8859-1" > 기본값
	
	c. pageEncoding="UTF-8"
	- 브라우저에게 돌려주는 페이지의 인코딩
	- == resp.setCharaterEncoding('UTF-8'); //서블릿
	
	d. import="java.util.Random"
	- 패키지/클래스 참조
	- 자바 > import java.util.Random;
	
	e. errorPage
	
	
	

include 지시자
- <%@ include file="URL" %>  ==> 속성이 file밖에 없음
- 특정 JSP 페이지(HTML, 텍스트파일 등)을 현재 JSP 페이지의 일부 영역으로 삽입하는 기능
- 조각 페이지라는 용어로도 불린다.
+ 반복되는 페이지를 따로 빼서 관리하기 위한 용도로 이용된다.




스크립틀릿, Scriptlet
- <% %>
- Script + Applet
- HTML 영역에서 Java를 사용 가능한 영역을 제곡
- *.java와 동일한 성질
- 사용 빈도 높음 > 비즈니스 코드 작성
- 데이터(JDBC), 동적(HTML, CSS, JavaScript) 조작



표현식, Expression
- <%= 값(출력할) %>
- 값: 상수, 변수, 메소드 반환값 등..
- 해당 위치에 자바 값을 출력하는 용도



선언부, Declaration
- <%! %>
- 해당 JSP 페이지에서 사용할 클래스 멤버 변수와 메소드를 선언하는 영역
- JSP 선언부에서 선언된 메소드의 최대 영역은 해당 JSP 페이지이다. > 사용하기에는 제한적이다.
- 대신, 일반 자바 클래스를 만들어서 참조 > 사용 권한이 넓다.






JSP 내장 객체, JSP Implicit Object
- 개발자가 직접 생성하지 않아도 JSP(톰캣)가 미리 만들어서 제공하는 객체
- 예약어로 제공
- request, response, session, pageContext > 자주 사용
- out, application > 가끔 사용
- config, page, exception > 잘 사용안함

- request, session, pageContext, application
	- 객체 내부에 사용자(개발자) 데이터를 저장할 수 있는 컬렉션을 가지고 있다.(매우매우 중요하다..*****************)
	- void setAttribute(String key, Object value)
	- Object getAttribute(String key)



request
- HttpServletRequest

1. 클라이언트에서 서버로 전송한 데이터를 가져오기
	- ex09_form.jsp : 사용자 입력 데이터를 받는 역할 + 서버로 전송하기
	- ex09_ok.jsp	: 전송된 데이터 수신하기 + 처리 + 완료
	- ex10_form.jsp
	- ex10_ok.jsp
	- ex11_form.jsp
	- ex11_ok.jsp
	
2. 클라이언트에서 서버로 전송한 데이터의 인코딩 처리


3. 클라이언트에서 서버로 전송할 때 관련 정보를 가져오기
	- ex12_request.jsp
	


response
- HttpServletResponse
1. 돌려줄 HTML 페이지 제작
	- response.getWriter() > PrintWriter > HTML 제작
	- 서블릿 > 명시적으로 작성해야함
	- JSP > 암시적으로 작성되어 있음

2. 돌려줄 페이지의 인코딩 설정
	- response.setCharacterEncoding("UTF-8");
	- 서블릿 > 명시적으로 작성해야함
	- JSP > 명시적으로 작성되어 있음 > <%@ page pageEncoding="UTF-8" %>

3. 돌려줄 페이지의 MIME 설정
	- 파일 업로드 수업 때 정리 (현재는 테스트가 어렵다)

4. 페이지 이동하기
	- ex13_response_1.jsp
	- ex13_response_2.jsp
	




pageContext
- 페이지 실행에 필요한 컨텍스트 정보를 저장하거나, 다른 내장 객체를 접근하거나, 페이지를 이동하는 역할
	- ex14_pagecontext_1.jsp
	- ex14_pagecontext_2.jsp
	




out
- 응답 페이지 작성을 위한 출력 스트림 객체
- 서블릿의 PrintWriter와 동일한 역할
- ex15_out.jsp
	
	
	

session, application
- 세션 변수 + 애플리케이션 변수 = 전역 변수(사이트 내의 모든 페이지에서 접근 가능)
	
application
- 애플리케이션 정보를 저장한 객체
- 서버와 관련된 정보 제공

session
- 클라이언트의 세션 정보를 저장한 객체
- 방문한 사용자 정보를 관리하는 객체
	- ex16_session.jsp
	
- ex17_session.jsp
- ex17_set.jsp
- ex17_del.jsp
- ex17_interval.jsp
- ex17_reset.jsp




파일 업로드
- 업로드: 클라이언트측 자원 > 서버로 전송 (= 파일 복사)
- 다운로드: 서버측의 자원 > 클라이언트 전송 (= 파일 복사)
- 브라우저와 웹서버간의 파일 복사


파일 업로드 라이브러리
- cos library > cos.jar
- http://www.servlets.com > COS File Upload Library
- webapp > WEB-INF > lib > cos.jar 복사
- webapp > example > "files" 폴더 생성



단일 파일 업로드
- ex18_file_form.jsp
- ex18_file_ok.jsp

다중 파일 업로드
- ex19_file_form.jsp
- ex19_file_ok.jsp

파일 업로드
- ex20_file_form.jsp
- ex20_file_ok.jsp





내장 객체 > 저장소 제공 > pageContext, request, session, application > 생명 주기 
사용자 데이터 저장 > 4개의 객체 중 어떤 객체를 사용할지?
- ex21_scope_1.jsp
- ex21_scope_2.jsp
- ex21_scope_3.jsp




Expression
- <%= %>


EL 언어(Expression Language)
- <%= %> 기능을 대신하기 위해서 만들어진 언어 > 가독성(코드 관리)
- 자바의 값을 HTML 페이지 소스에 출력하는 역할
- ${속성명}
- 일반적인 자바 데이터를 출력할 수 없다. > 변수, 상수, 메소드 반환값 등을 출력할 수 없다.
- pageContext, request, session, application 객체내 저장소의 값만 출력할 수 있다.

- ex22_el.jsp





JSTL 액션 태그
- <c:XXX> 태그 사용
- c: > Namespace > 자바 패키지 역할
- JSP Standard Tag Library
- 설치가 필요하다. > http://tomcat.apache.org/taglibs/standard/
- ex23_jstl.jsp





주소록
- JSP Model 1
- Oracle 11g
- Bootstrap + jQuery
- Apache Tomcat 8.5
- Java 11

기능
- CRUD 구현
- 주소록 쓰기
- 주소록 보기
- 주소록 수정하기
- 주소록 삭제하기

DB
- tblAddress
- 번호(PK), 이름, 나이, 주소, 성별, 연락처

디렉토리 구성 + 페이지 설계
- 주소록: 			  webapp > address (루트 폴더)
- 주소록: 주소록쓰기: webapp > address > add.jsp, addok.jsp
- 주소록: 주소록읽기: webapp > address > list.jsp (시작 페이지)
- 주소록: 주소록수정: webapp > address > edit.jsp, editok.jsp
- 주소록: 주소록삭제: webapp > address > del.jsp, delok.jsp
- 주소록: 템플릿    : webapp > address > template.jsp
- 주소록: 조각페이지: webapp > address > inc > header.jsp (머릿말 조각페이지)
- 주소록: 조각페이지: webapp > address > inc > asset.jsp (Bootstrap, jQuery)
- 주소록: 라이브러리: webapp > address > css > address.css (전역 CSS)
- 주소록: 라이브러리: webapp > address > js > address.js (전역 JavaScript)


화면 틀 생성하기 > template.jsp






이미지 갤러리

1. list.jsp
	- 목록보기
	- DB > select.. > 사진 아이템 생성
	- 사진 아이템 클릭 > 제목, 파일명, 날짜, 사진

2. add.jsp + addok.jsp
	- 제목, 이미지 > 서버 전송 //add.jsp
	- 파일 업로드 처리 + 제목, 이미지명 > DB > insert //addok.jsp

3. delok.jsp
	- a. 파일 삭제..
	- b. DB > delete



DB
- JSPTest > gallery.sql




웹 인증, Authentication
- 로그인, 로그아웃
- 현재 접속자가 해당 사이트의 구성원인지를 확인하는 방법
- 해당 접속자가 구성원인지 확인 작업(아이디, 암호) > 인증 티켓 발급(인증 과정을 거쳐야지만 가지게 되는 정보) > 사이트 내에서 이동이 가능(페이지간에 전달 과정없이도 유지 가능) + 보안 안전(타인이 열람할 수 없도록) > 세션 or 쿠키

허가, Authorization
- 특정 행위를 할 때 권한이 있는지 확인하는 작업


webapp > "auth"폴더 생성
		- index.jsp		> 시작 페이지
		- login.jsp		> 로그인 폼 페이지
		- loginok.jsp	> 로그인 처리 페이지(인증 작업)
		- logout.jsp	> 로그아웃 페이지
		- member.jsp	> 회원 전용 페이지(허가 작업)
		- admin.jsp		> 관리자 전용 페이지(허가 작업)

webapp > css, fonts, inc, js 폴더 복사
		- css > auth.css 생성
		- inc > asset.jsp 수정





Servlet
- Java > O
- HTML > X

JSP
- HTML > O
- Java > X


Servlet + JSP = 융합(X) > 협력(O)
- Servlet(Java) + JSP(HTML)
- Servlet > Java
- JSP > HTML

JSP Model 1의 처리 방식 > 공통점
1. 상단에서 주로 자바 작업을 한다.(JDBC) > Servlet 담당
2. 하단에서 주로 자바의 결과물을 가지고 화면에 출력 작업(HTML, CSS, JavaScript)을 한다. > JSP 담당

JSP Model 2의 처리 방식 (****************************)
- 고객 요청 > Servlet 시작 ~ 끝 > (업무 위임 + 데이터 전달) > JSP 시작 ~ 끝 > 페이지 완성





JSP Model 1 > JSP Model 2

JSP Model 1
- JSP 페이지만을 사용
- HTML, CSS, JavaScript > JSP 페이지 작성
- Java > JSP 페이지 작성


JSP Model 2
- Servlet + JSP
- 디자인 패턴 > MVC 기반으로 만들어짐
	- Model + View + Controller
	- Model > Data 계층 > DTO(DAO)
	- View > 출력 계층 > JSP(뷰 페이지)
	- Controller > 제어 계층 > 서블릿
	
- JSP MVC (정식 표현X)

- "com.test.mvc" 패키지 생성
	- "Hello.java" 서블릿 생성
- webapp > "mvc" 폴더 생성
	- "hello.jsp" 페이지 생성




주소록, 갤러리, 할일



메모장
- JSP Model 2 (MVC)
- Oracle 11g
- Bootstrap, jQuery

기능
1. 메모 쓰기
2. 메모 읽기(목록)
3. 메모 수정
4. 메모 삭제

- "com.test.memo"
	- DBUtil.java		 		> 복사
	- List.java 				> 메모 읽기
	- Add.java, AddOk.java 		> 메모 쓰기
	- Edit.java, EditOk.java 	> 메모 수정
	- Del.java, DelOk.java 		> 메모 삭제
	- "Template.java"
	- "DAO.java", "DTO.java"
	
- webapp > WEB-INF > "views" > "memo"
								- "list.jsp"				> 메모 읽기
								- "add.jsp", "addok.jsp" 	> 메모 쓰기
								- "edit.jsp", "editok.jsp" 	> 메모 수정
								- "del.jsp", "delok.jsp" 	> 메모 삭제
								- "template.jsp"

- webapp > WEB-INF > views > memo > "inc"
								- "header.jsp"	> 조각 페이지
								- "asset.jsp"	> 조각 페이지

- webapp > "asset"
			- css, js, fonts 복사





게시판 > CRUD










































