
요구사항
1. 게시판
2. 회원(인증)
3. JSP Model 2
4. Oracle 11g
5. Bootstrap + jQuery
6. 부가 기능(차트, 맵 등..)


DB 설계
- 점차적..

패키지 구조
	- "com.test.toy" 			> 메인
	- "com.test.toy.board" 		> 게시판
	- "com.test.toy.member" 	> 회원
	- "com.test.toy.etc" 		> 부가기능

폴더 구조
	- webapp > WEB-INF > "views" 			> 뷰 루트(toy 패키지 대응)
						> "board"			> 게시판
						> "member"			> 회원
						> "etc"				> 부가기능
						> "inc"				> 조각 페이지

라이브러리 설치
	- webapp > WEB-INF > lib
						> ojdbc6.jar	> 오라클
						> jstl-1.2.jar	> JSTL
						> lombok.jar	> Lombok
						> cos.jar		> 파일 업로드
	- webapp > "asset"
				> css
				> js
				> fonts
				> images
				> 파일 업로드 폴더(예정)



기본 템플릿 페이지
- com.test.toy > "Template.java"
- views > "template.jsp"

- webapp > asset > css > "toy.css"
				 > js  > "toy.js"
				 
- webapp > WEB-INF > inc > "header.jsp"



시작 페이지
- com.test.toy > "Index.java"
- views > "index.jsp"


회원 가입
- com.test.toy.member > "Register.java"
					  > "RegisterOk.java"
- views > member > "register.jsp"
				 > "registerok.jsp"			

- webapp > "pic"

- com.test.toy.member > "MemberDAO.java"
					  > "MemberDTO.java" <- tblUser 담당
	
	

로그인
- com.test.toy.member > "Login.java"		
					  > "LoginOk.java"
					  > "LogOut.java"
- views > member > "login.jsp"
				 > "loginok.jsp"
				 > "logout.jsp"


회원 정보
- com.test.toy.member > "Info.java"
- views > member > "info.jsp"
- webapp > pic > pic.png


회원 탈퇴
- com.test.toy.member > "Unregister.java"
- views > member > "unregister.jsp"





게시판
- com.test.toy.board > "BoardDAO.java"
					 > "BoardDTO.java"
					 > "List.java"
					 > "Add.java"
					 > "AddOk.java"
					 > "View.java"
					 > "Edit.java"
					 > "EditOk.java"
					 > "Del.java"
					 > "DelOk.java"

- views > board > "list.jsp"
				> "add.jsp"
				> "addok.jsp"
				> "view.jsp"
				> "edit.jsp"
				> "editok.jsp"
				> "del.jsp"
				> "delok.jsp"

------------------------------------------------------------- CRUD




검색

댓글쓰기

- com.test.toy.board > "AddCommentOk.java"
			         > "CommentDTO.java"

댓글삭제
- com.test.toy.board > "DelCommentOk.java"


댓글수정
- com.test.toy.board > "EditCommentOk.java"					 



페이징
- 가상으로 일정 단위의 게시물을 가져오는 기법 > SQL 사용




답변쓰기(계층형 게시판, 답변 게시판)
- 테이블 수정 > thread, depth 컬럼 추가


- thread, depth 컬럼의 규칙!!


1. 새글쓰기
	- /toy/board/add.do
	a. 현존하는 모든 게시물 중에서 가장 큰 thread 값을 찾아서, 그 값에 +1000을 한 값을 새글의 thread값으로 사용한다.
	b. 새글의 depth는 항상 0을 넣는다.




2. 답변글 쓰기
	- /toy/board/add.do?reply=1
	a. 현존하는 모든 게시물의 thread값을 대상으로 현재 작성 중인 답변글의 부모글 thread값보다 작고, 이전 새글의 thread값보다 큰 thread를 모두 찾아서 -1을 한다.
	b. 현재 답변글의 thread값은 부모글의 thread-1을 넣는다.
	c. 현재 답변글의 depth값은 부모글의 depth+1을 넣는다.








파일업로드
- 게시판 첨부파일
- webapp > files 폴더 생성

태그(#)
- 해시 태그 > (카테고리) 검색 기능
- webapp > asset > css > tagify.css
				 > js  > jQuery.tagify.min.js
				 
- webapp > WEB-INF > lib > json-simple-1.1.1.jar






싫어요/좋아요
- 싫어요 카운트, 좋아요 카운트
- com.test.toy.board > "GoodBad.java"



차트 연동
- 회원 > 게시물 생산 > 차트 출력

- com.test.toy.etc > "Chart.java"
- views > etc > "chart.jsp"



지도 연동
- 게시물 + 첨부파일(이미지 > 메타 정보 > 위도, 경도) > 지도 출력
- 지도 API 수업

- com.test.toy.etc > "Map.java"
- views > etc > "map01.jsp"



장소 CRUD
- 장소 즐겨찾기 + 지도 연동

- com.test.toy.etc > "Food.java" //목록
					>  "AddFood.java"
					>  "AddFoodOk.java"
					>  "EtcDAO.java"
					>  "FoodDTO.java"

- views > etc > "food.jsp"
			  > "addfood.jsp"






서버 갱신 데이터 > 브라우저 전달
1. 새로 고침 > 프로그램
2. <frame>, <iframe> 사용
3. Ajax <-> ActiveX, Applet
4. WebSocket




Ajax, Asynchronous JavaScript and XML
- 비동기 자바스크립트 and XML
- 자바스크립트 기반 비동기 통신 기법
- 브라우저와 웹서버간의 자바스크립트를 사용한 데이터를 주고받는 기술
- ~ 현재까지 수업한 자바스크립트: 브라우저(크롬) ~ 웹서버(아파치톰캣)


네트워크 통신 방식
- 동기 통신
- 비동기 통신



Ajax 구현 방식
1. XMLHttpRequest 사용
2. jQuery Ajax 사용
3. fetch 사용



- "com.test.toy.ajax" > "AjaxDAO.java
					  > "Ex01.java"


- views > "ajax" > "ex01.jsp"


DB
- script.sql



- com.test.toy.ajax > "Ex02.java"
					> "Ex02Data.java"
					> "Ex02Data2.java"
- views > ajax > "ex02.jsp"
			   > "ex02data.jsp"
			   > "ex02data2.jsp"
			   
아이디 중복 검사
- com.test.toy.ajax > "Ex03.java"
					> "IdCheck.java"
					> "IdCheckOk.java"
- views > ajax > "ex03.jsp"
			   > "idcheck.jsp"
			   
			   
- com.test.toy.ajax > "Ex04.java"
					> "Ex04Data.java"
- views > ajax > "ex04.jsp"




- com.test.toy.ajax > "Ex05.java"
					> "Ex05Text.java"
					> "Ex05XML.java"
					> "Ex05JSON.java"
- views > ajax > "ex05.jsp"





tblInsa 목록 페이지

- com.test.toy.ajax > "Ex06.java"
					> "Ex06Data.java"
- views > ajax > "ex06.jsp"




Ajax + CRUD 문제
- tblAddress 테이블(번호, 이름, 나이, 주소, 성별, 연락처)

- com.test.toy.ajax > "Ex07.java"
					> "Ex07Add.java"
					> "Ex07Del.java"
					> "AddressDTO.java"
- views > ajax > "ex07.jsp"


요구사항
- 모든 행동이 페이지 새로고침 없이 진행되게 구현하시오.
1. ex07.do 접속 시 > tblAddress의 모든 항목을 테이블에 출력하시오. :: MVC 방식
2. 입력 폼 > 데이터 작성 > 등록하기 버튼 클릭 > DB에 insert :: Ajax 방식
											  > 방금 등록한 데이터를 테이블에 즉시 반영
											  > "Ex07Add.java"
3. 삭제 버튼 클릭 > DB에서 delete :: Ajax 방식
				  > 방금 삭제된 데이터를 테이블에 즉시 반영
				  > "Ex07Del.java"
4. 상단 성별 버튼 클릭 > 클릭한 성별만 테이블에 반영 :: Ajax 방식
					   > "Ex07Search.java"





Ajax > 게시판 > 댓글 쓰기



jQuery Draggable + Ajax
- com.test.toy.ajax > "Ex08.java"
					> "Ex08Data.java"
- views > ajax > "ex08.jsp"








크롤링(Crawling), 스크래핑(Scraping)
- 웹상의 페이지들에게서 내가 원하는 정보를 수집하는 행위
- 왜? > 예) 맛집 블로그 방문 > 식당 정보 얻고 싶다!! > 방법?
		1. 상대방이 나에게 DB 권한을 준다면.. > 가장 좋은 방법 > 불가능
		2. OpenAPI 공개 > 무난한 방법(가장 많이 사용)
		3. 1(X), 2(X) > 크롤링(최후의 방법이다.. 1순위가 되면 안됨..) > 블로그 소스를 긁어와서 원하는 데이터를 추출

크롤링 주의점!!!
- 문제가 있는 행동
- 허가 문제, 저작권 문제
- 정도껏~ 사용;; > 긁는 작업 > 프로그램이 작업 > 속도 빠름 & 횟수 많음 > 서버에게 부하(물리적, 트래픽)가능성 높음 > 소송의 위험성
			
			
크롤링 준비
1. HTML 이해
2. CSS 이해 + (JavaScript)
3. JSOUP 라이브러리 사용
		
		
- com.test.toy.etc > "Ex01.java"





Open API
- 오픈 API 또는 공개 API는 개발자라면 누구나 사용할 수 있도록 공개된 API를 말하며, 개발자에게 사유 응용 소프트웨어나 웹 서비스의 프로그래밍 적인 권한을 제공한다. 반대말은 프라이빗 API다.
- 네트워크(웹, http://)을 통해서 API를 제공한다.

기존 API
- *.jar > 사용 > 설치
- 해당 기능 실행 주체 > 나
- rnd.jar

Open API
- 공개 URL > 접속 > 사용
- 해당 기능 실행 주체 > API 서버
- URL
- 데이터 서비스(***)


- com.test.toy.etc > "OpenAPI01.java"

- com.test.toy.etc > "OpenAPI02.java"
- views > etc > "openapi02.jsp"






웹 프로젝트
- 기간: 07.11 ~ 07.22 (보통은 4주과정인데 그때에도 모자랐다..)
- 주제: 자유 > 기존 서비스(+개선) or 창의적 주제 > 기준 > 데이터가 많은거
- 사용 기술: JSP Model 2, Oracle, HTML, CSS, JavaScript, jQuery, Bootstrap(다른 프레임워크), Ajax, chart, Map... Open API... 수업 내용...
- 분량: DB(Oracle 수준: 20~30개), 페이지(5일-구현 > 1일(1장 ~ 5장)
- 발표일: 22일 오후 2시

1. 아이템 선정 + 기획서
2. 요구 분석서
3. DB 설계 > ERD + 스크립트 + 더미 데이터 + 업무 SQL
4. 화면 설계(스토리 보드) + 페이지 순서도
5. 구현
6. 발표
7. 정리




























































